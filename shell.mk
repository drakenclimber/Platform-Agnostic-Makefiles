#*******************************************************************************
#
#  Copyright 2011 Drakenclimber, LLC.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#*******************************************************************************
# Revision information.  DO NOT MODIFY.  This is auto-generated by the SCM.
#
# $Revision: $
# $Date: $
#
#*******************************************************************************

#*******************************************************************************
#  Configure the build type - rel, dev, or dbg.  enter "make help" for more 
#  information. 
#*******************************************************************************
DEFAULT_BUILD_TYPE  = BUILD_DEV
BUILD_TYPE         ?= $(DEFAULT_BUILD_TYPE)

ifeq ($(strip $(BUILD_TYPE)), BUILD_REL)
   BUILD_TYPE_DIR   := rel
   COMPILER_DEFINES += -DBUILD_TYPE=BUILD_REL

else ifeq ($(strip $(BUILD_TYPE)), BUILD_DEV)
   BUILD_TYPE_DIR   := dev
   COMPILER_DEFINES += -DBUILD_TYPE=BUILD_DEV

else ifeq ($(strip $(BUILD_TYPE)), BUILD_DBG)
   BUILD_TYPE_DIR := dbg
   COMPILER_DEFINES += -DBUILD_TYPE=BUILD_DBG

else
   $(error "Invalid BUILD_TYPE $(BUILD_TYPE) specified.")

endif

#*******************************************************************************
#  determine the shell we were invoked in
#*******************************************************************************
ifeq ('$(strip $(SHELL))', '/bin/sh')
   ENVIRONMENT := LINUX

else ifeq ('$(strip $(SHELL))', '/bin/bash')
   ENVIRONMENT := LINUX

else ifeq ('$(strip $(SHELL))', '/bin/csh')
   ENVIRONMENT := LINUX

else
   # assume DOS
   ENVIRONMENT := DOS

endif

#*******************************************************************************
#  Environment-Agnostic Definitions
#*******************************************************************************
define NEWLINE


endef # end of NEWLINE definition

# function     ERROR_HANDLER
# description	displays an error message and exits make
# parameters	$(1) - erro message to be displayed
# return       returns the return value from the make $(error ...) command
# example		$(call ERROR_HANDLER, $(error_message))
ERROR_HANDLER = $(error $(1))

ifeq ($(strip $(ENVIRONMENT)), DOS)
   #****************************************************************************
   #  Definitions
   #****************************************************************************
   DIRSEP            := \\
   EOL               := \r\n
   NULL              := NUL
   
   #****************************************************************************
   #  Functions
   #****************************************************************************
   # function     DELETE_FILE 
   # description	deletes a file
   # parameters	$(1) - file to be deleted
   # return       returns the return value from the DOS del command
   # example		$(call DELETE_FILE, $(file_to_be_deleted))
   DELETE_FILE = $(shell del $(call FIX_PATH, $(1)) > $(NULL) 2>&1)
   
   # function     DOES_FILE_EXIST
   # description  checks if a file (or directory) exists
   # parameters   $(1) - file or directory to be checked
   # return       returns 1 if the file/directory exists. returns null otherwise
   # example      $(call DOES_FILE_EXIST, $(file_name))
   DOES_FILE_EXIST = $(shell IF EXIST $(1) ECHO "1")

   # function     FIX_PATH
   # description  converts a path to the native OS path format
   # parameters   $(1) - path to be converted
   # return       returns the fixed path
   # example      $(call FIX_PATH, $(path_to_be_fixed))
   FIX_PATH = $(subst /,$(DIRSEP),$(1))

   # function     MKDIR 
   # description  create a directory
   # parameters   $(1) - directory to be created
   # return       returns the return value from the DOS mkdir command
   # example      $(call MKDIR, $(directory_name))
   MKDIR = $(shell mkdir $(call FIX_PATH, $(1)))

   # function		MKDIR_IF_DNE
   # description	create a directory if it does not exist
   # parameters	$(1) - directory to be created
   # return       returns the return value from the DOS mkdir command
   # example		$(call MKDIR_IF_DNE, $(directory_name))   
   MKDIR_IF_DNE = $(if $(call DOES_FILE_EXIST, $(1)), , $(call MKDIR, $(1)))
   
   #****************************************************************************
   #  Targets
   #****************************************************************************

else ifeq ($(strip $(ENVIRONMENT)), LINUX)
   #****************************************************************************
   #  Definitions
   #****************************************************************************
   DIRSEP            := /
   EOL               := \n
   NULL              := /dev/null
   
   #****************************************************************************
   #  Functions
   #****************************************************************************
   # function     DELETE_FILE 
   # description	deletes a file
   # parameters	$(1) - file to be deleted
   # return       returns the return value from the POSIX rm command
   # example		$(call DELETE_FILE, $(file_to_be_deleted))
   DELETE_FILE = $(shell rm -f $(1) > $(NULL) 2>&1)
   
   # function     DOES_FILE_EXIST
   # description  checks if a file (or directory) exists
   # parameters   $(1) - file or directory to be checked
   # return       returns 1 if the file/directory exists. returns null otherwise
   # example      $(call DOES_FILE_EXIST, $(file_name))
   DOES_FILE_EXIST = $(shell test -e $(1) && echo "1")

   # function     FIX_PATH
   # description  converts a path to the native OS path format.  note that no
   #					conversion is necessary in linux
   # parameters   $(1) - path to be converted
   # return       returns the fixed path
   # example      $(call FIX_PATH, $(path_to_be_fixed))
   FIX_PATH = $(1)

   # function     MKDIR 
   # description  create a directory
   # parameters   $(1) - directory to be created
   # return       returns the return value from the POSIX mkdir command
   # example      $(call MKDIR, $(directory_name))
   MKDIR = $(shell mkdir $(1))

   # function		MKDIR_IF_DNE
   # description	create a directory if it does not exist
   # parameters	$(1) - directory to be created
   # return       returns the return value from the POSIX mkdir command
   # example		$(call MKDIR_IF_DNE, $(directory_name))   
   MKDIR_IF_DNE = $(shell mkdir -p $(1))

   #****************************************************************************
   #  Targets
   #****************************************************************************
   
else
   $(call ERROR_HANDLER, "Unsupported shell/environment.")

endif